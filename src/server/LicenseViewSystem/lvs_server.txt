#!/usr/bin/env python
# -*- coding:UTF-8 -*-

from http.server import HTTPServer
from http.server import BaseHTTPRequestHandler
import json
import os

class GetHandler(BaseHTTPRequestHandler) :
    def do_GET(self):
        req_url = self.path

        if req_url == '/index/':
            print('client access index page.')
        elif req_url == '/':
            print('client access main page')
            cwd = os.getcwd()+'\\webpage\\login form\\index.html'
            html_file = open(cwd, 'r', encoding='utf-8')
            html_doc = html_file.read()

            self.send_response(200)
            self.end_headers()
            self.wfile.write(bytes(html_doc, 'utf-8'))
        else:
            self.send_response_only(404)
            self.end_headers()

        return

    def do_POST(self):
        req_url = self.path

        if req_url == '/user-auth/':
            print('client access authentication')

            req_body = self.rfile.read()
            print('stream read clear')
            json_read = json.loads(repr(req_body))
            print(json_read)

            # TODO write code for json string
            info = json.dumps({'TYPE': 0, 'END-DATE': 20151231})
            json_val = json.dumps({'SIGNAL': 'LICENSE', 'LICENSE-INFO': info})

            self.send_response(200)
            self.end_headers()
            self.wfile.write(json_val)
        elif req_url == '/login-process/':
            print('web browser login request')
            req_body = self.rfile.read()
            print(req_body)
            tub = repr(req_body).split('&')
            username = tub[0].split('=')
            password = tub[1].split('=')

            print(username[1], password[1])

            self.send_response(302)
            self.end_headers()
            self.wfile.write(bytes('<html><head></head><body><p>Login sequence clear</p></body></html>', 'utf-8'))
        return

if __name__ == '__main__':

    server = HTTPServer(('0.0.0.0', 8080), GetHandler)
    print('Starting server. use <Ctrl-C> to stop.')
    server.serve_forever()
